package SourceCode;

import com.mongodb.AggregationOutput;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.Mongo;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import SourceCode.DbSelector;

/**
 *
 * @author ankitpagar
 */
public class mapFrame extends javax.swing.JFrame {
    String op1="";
    String op2="";
    String select = "";
    String table = "";
    String cond = "";
    long pstime,petime,prtime;
    public static Mongo mongo = null;
    public static DB db = null;
    DBCursor cursorDoc = null;
    DBCursor cursor = null;
    DBCollection collection;
    StringTokenizer selectTokens = null;
    StringTokenizer whereTokens = null;
    ArrayList<String> selectArray;
    ArrayList<String> hbaseAndOr;
    ArrayList<String> result;
    public BasicDBObject allQuery;
    BasicDBObject fields;
    BasicDBObject condQuery;
    BasicDBObject andOrQuery;
    AggregationOutput output2; 
    ArrayList<String> whereArray;
    ArrayList<BasicDBObject> andOrQueryArray;
    String[] whereSplitted = null; 
    public static mapFrame mpframe = null;
    hbase hb;
    int checker = 0;
    int whereCondChecker=0;
    int whereAndOrSwitcher = 0;
    int countChecker=0;
     DbSelector decisionMaker;
    String dbswitcher="1";
    public mapFrame() {
        initComponents();
        aggIntialize();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectLabel = new javax.swing.JLabel();
        fromLabel = new javax.swing.JLabel();
        whereLabel = new javax.swing.JLabel();
        selectBox = new javax.swing.JTextField();
        fromBox = new javax.swing.JTextField();
        whereBox = new javax.swing.JTextField();
        rightBrace = new javax.swing.JLabel();
        Map = new javax.swing.JButton();
        invalidWhere = new javax.swing.JLabel();
        invalidSelect = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayBox = new javax.swing.JTextArea();
        groupbyLabel = new javax.swing.JLabel();
        aggDropList = new javax.swing.JComboBox<>();
        keyField = new javax.swing.JTextField();
        groupbyField = new javax.swing.JTextField();
        leftBrace = new javax.swing.JLabel();
        aggregationLabel1 = new javax.swing.JLabel();
        invalidFrom1 = new javax.swing.JLabel();
        aggCheckBox = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1300, 700));
        setMinimumSize(new java.awt.Dimension(1300, 700));
        setResizable(false);
        getContentPane().setLayout(null);

        selectLabel.setForeground(new java.awt.Color(253, 251, 251));
        selectLabel.setText("SELECT");
        getContentPane().add(selectLabel);
        selectLabel.setBounds(20, 90, 53, 17);

        fromLabel.setForeground(new java.awt.Color(254, 254, 254));
        fromLabel.setText("FROM");
        getContentPane().add(fromLabel);
        fromLabel.setBounds(20, 170, 41, 17);

        whereLabel.setForeground(new java.awt.Color(254, 254, 254));
        whereLabel.setText("WHERE");
        getContentPane().add(whereLabel);
        whereLabel.setBounds(20, 210, 50, 17);

        selectBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBoxActionPerformed(evt);
            }
        });
        getContentPane().add(selectBox);
        selectBox.setBounds(100, 90, 227, 27);

        fromBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromBoxActionPerformed(evt);
            }
        });
        getContentPane().add(fromBox);
        fromBox.setBounds(100, 170, 227, 27);
        getContentPane().add(whereBox);
        whereBox.setBounds(100, 210, 227, 27);

        rightBrace.setFont(new java.awt.Font("Ubuntu Medium", 1, 20)); // NOI18N
        rightBrace.setForeground(new java.awt.Color(254, 254, 254));
        rightBrace.setText(")");
        getContentPane().add(rightBrace);
        rightBrace.setBounds(420, 130, 10, 30);

        Map.setText("OK");
        Map.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MapActionPerformed(evt);
            }
        });
        getContentPane().add(Map);
        Map.setBounds(170, 310, 82, 29);

        invalidWhere.setFont(new java.awt.Font("Ubuntu Medium", 0, 18)); // NOI18N
        invalidWhere.setForeground(new java.awt.Color(254, 1, 1));
        getContentPane().add(invalidWhere);
        invalidWhere.setBounds(330, 250, 160, 30);

        invalidSelect.setFont(new java.awt.Font("Ubuntu Medium", 0, 18)); // NOI18N
        invalidSelect.setForeground(new java.awt.Color(254, 1, 1));
        getContentPane().add(invalidSelect);
        invalidSelect.setBounds(330, 210, 160, 30);

        displayBox.setEditable(false);
        displayBox.setColumns(20);
        displayBox.setRows(5);
        jScrollPane1.setViewportView(displayBox);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(510, 60, 710, 560);

        groupbyLabel.setForeground(new java.awt.Color(255, 250, 250));
        groupbyLabel.setText("GROUPBY");
        getContentPane().add(groupbyLabel);
        groupbyLabel.setBounds(20, 250, 70, 20);

        aggDropList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please Select", "max", "min", "avg", "count" }));
        aggDropList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggDropListActionPerformed(evt);
            }
        });
        getContentPane().add(aggDropList);
        aggDropList.setBounds(100, 130, 140, 27);

        keyField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                keyFieldMouseClicked(evt);
            }
        });
        keyField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyFieldActionPerformed(evt);
            }
        });
        getContentPane().add(keyField);
        keyField.setBounds(270, 130, 140, 27);
        getContentPane().add(groupbyField);
        groupbyField.setBounds(100, 250, 130, 27);

        leftBrace.setFont(new java.awt.Font("Ubuntu Medium", 1, 20)); // NOI18N
        leftBrace.setForeground(new java.awt.Color(254, 254, 254));
        leftBrace.setText("(");
        getContentPane().add(leftBrace);
        leftBrace.setBounds(250, 130, 10, 30);

        aggregationLabel1.setForeground(new java.awt.Color(255, 250, 250));
        aggregationLabel1.setText("AGGR.");
        getContentPane().add(aggregationLabel1);
        aggregationLabel1.setBounds(20, 130, 50, 20);

        invalidFrom1.setFont(new java.awt.Font("Ubuntu Medium", 0, 18)); // NOI18N
        invalidFrom1.setForeground(new java.awt.Color(254, 1, 1));
        getContentPane().add(invalidFrom1);
        invalidFrom1.setBounds(330, 90, 160, 30);

        aggCheckBox.setForeground(new java.awt.Color(254, 254, 254));
        aggCheckBox.setText("Perform aggregation ");
        aggCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                aggCheckBoxMouseClicked(evt);
            }
        });
        aggCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aggCheckBoxActionPerformed(evt);
            }
        });
        getContentPane().add(aggCheckBox);
        aggCheckBox.setBounds(100, 50, 180, 24);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon("/home/ankitpagar/NetBeansProjects/BE_project_UI/src/UI/pics/mapbackground.jpg")); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 2140, 800);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectBoxActionPerformed

    }//GEN-LAST:event_selectBoxActionPerformed

    private void fromBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromBoxActionPerformed

    }//GEN-LAST:event_fromBoxActionPerformed

    private void MapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MapActionPerformed
        select = "";
        table = "";
        cond = "";
        countChecker = 0;
        cursorDoc = null;
        selectArray = new ArrayList<>();
        result = new ArrayList<>();
        allQuery = new BasicDBObject();
        fields = new BasicDBObject();
        andOrQueryArray = new ArrayList<>();
        displayBox.setText("");
        select = selectBox.getText();
        table = fromBox.getText();
        cond = whereBox.getText();
        cond = cond.toLowerCase();
        displayBox.setText("");
        dbswitcher="1";
        MongoConnect("127.0.0.1", "testdata", "testtable");
        hbaseAndOr = new ArrayList<String>();
        pstime = System.currentTimeMillis();
        if (aggCheckBox.isSelected() == true) {
            //decision maker :pass "1"
            dbswitcher = dbswitcher.concat("2");
            aggregateMongo(keyField.toString(), groupbyField.toString(), aggDropList.getSelectedIndex());
        }
        if (select.equals("")) {
            invalidSelect.setText("Invalid Statement");
            return;
        } else {
            invalidSelect.setText("");
        }
        if (select.toLowerCase().contains(",")) {
            dbswitcher = dbswitcher.concat("1");
            selectTokens = new StringTokenizer(select, ",");
            insertSelectTokens();
        } else if (select.equals("*")) {
            dbswitcher = dbswitcher.concat("0");
            insertSelectTokens();
        } else {
            // only 1 select token is passed: eg. Select name from table1;
            dbswitcher = dbswitcher.concat("1");
            selectArray.add(select);
            insertSelectTokens();
            
        }
        
     
       
       
        
        
        System.out.println("before entering querychecker");
         decisionMaker = new DbSelector();
        if(decisionMaker.checkJoin(table)){
            //sql
        }else{
            queryChecker();
        }
        
        // tokens form where clause
    }//GEN-LAST:event_MapActionPerformed
    

    
    void dbQueryFire(BasicDBObject queryObj){
        hb = new hbase();
        try {
            int switcher = Integer.parseInt(dbswitcher);
            boolean flag;
            System.out.println("before decision");
            //flag = decisionMaker.decide(switcher);
            flag=true;
            System.out.println("after decision");
            System.out.println("withcer::"+switcher);
            switch(switcher){
                
                case 10: 
                   
                    System.out.println("in dbQueryfire case 10");
                    
                    // select * from table
                    
                        if(flag==true){
                            fireQuery(queryObj, fields);
                        }
                        else{
                            hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                        }
                  
                  
                        
                  
                    
                    break;
                    
                case 1021:
                    // select * from table where name = 'abc';
                    if(flag == true){
                        System.out.println("in if hbase 1021 case");
                        fireQuery(queryObj, fields);
                    }else{
                        System.out.println("in else hbase 1021 case");
                        hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                         fireQuery(queryObj, fields);
                        
                    
                    
                    break;
                    
                case 1022:
                    // select * from table where rollno = 10;
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }
                    else{
                        hb.hbaseFunction(cond,table,selectArray,1021,whereArray);
                    }
                    
                    break;
                    
                case 103:
                    // select * from table where rollno > 10;
                    
                    
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                        hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 104:
                    // select * from table where rollno < 10;
                    
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                        hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 105:
                    // select * from table where rollno != 10;
                    
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 106:
                    // select * from table where rollno >= 10;
                    
                    if(flag==true){
                    fireQuery(queryObj, fields);
                    }else{
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 107:
                    // select * from table where rollno <= 10;
                    
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 108:
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }
                    else{
                        hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    }
                   
                    break;
                    
                case 109:
                    // select * from table where rollno = 10 AND name = 'abc';
                      //hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    //hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }
                    else{
                        hb.andOrFunction(hbaseAndOr, keyField.getText(), op1, op2);
                        hb.hbaseFunction(cond, table, selectArray, switcher, whereArray);
                    }
                    break;

                case 11:
                    //System.out.println("in dbQueryfire case 11");
                    if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
            
                    // select name, rollno from table;
                    break;
                    
                case 1121:
                    if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 1122:
                   if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,1121,whereArray);
                    }
                 break;   
                    
                case 113:
                  if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    
                    break;
                    
                case 114:
                   if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    
                    break;
                    
                case 115:
                    if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 116:
                    if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    
                    break;
                    
                case 117:
                  if (flag == true) {
                        fireQuery(queryObj, fields);
                    } else{
                              hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    
                    break;
                    
                case 118:
                    System.out.println("in dbQueryfire case 118");
                    // select name, rollno from table where r= 10 OR n = 'a';
                  //hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    //hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 119:
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 121:
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 122:
                    // avg(salary) from table GROUPBY dept;
                    //hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    //hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    fireQuery(queryObj, fields);
                    break;
                    
                case 123:
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 124:
                    // max(salary) from table GROUPBY dept;
                    //hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    //hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    fireQuery(queryObj, fields);
                    break;
                    
                case 125:
                    if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
                    
                case 126:
                    // min(salary) from table GROUPBY dept;
                   //hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                   // hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    fireQuery(queryObj, fields);
                    break;
                    
                case 127:
                   if(flag==true){
                        fireQuery(queryObj, fields);
                    }else{
                    hb.andOrFunction(hbaseAndOr,keyField.getText(),op1,op2);
                    hb.hbaseFunction(cond,table,selectArray,switcher,whereArray);
                    }
                    break;
            }
        } catch (Throwable ex) {
            Logger.getLogger(mapFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    String whereQueryformator(String cond) {
        whereArray = new ArrayList<>();
        String operator="";  
        if (cond.equals("")) {
                //allQuery: no where condition
                checker = 1;
            }
        else if (cond.toLowerCase().contains("=")) {
            if (cond.toLowerCase().contains("!=")) {
                operator="!=";
                insertWhereTokens("!=", cond);
                checker = 5;
            } else if (cond.toLowerCase().contains("<=")) {
                operator="<=";
                insertWhereTokens("<=",cond);
                checker = 7;
            } else if (cond.toLowerCase().contains(">=")) {
                operator=">=";
                insertWhereTokens(">=",cond);
                checker = 6;
            } else if (cond.toLowerCase().contains("=")) {
                operator="=";
                insertWhereTokens("=",cond);
                checker = 2;
            }
        } else {
            if (cond.toLowerCase().contains(">")) {
                insertWhereTokens(">",cond);
                checker = 3;
            }

            if (cond.toLowerCase().contains("<")) {
                insertWhereTokens("<",cond);
                checker = 4;
            }
        }

        switch (checker) {

          

            case 2:
                boolean isint;
                Integer number;
                
                if (whereAndOrSwitcher == 0) {
                    
                    System.out.println("im in case 2: if");
                    isint = isInteger(whereArray.get(1));
                    if (isint == false) {
                        dbswitcher = dbswitcher.concat("21");
                        condQuery.put(whereArray.get(0), whereArray.get(1));
                    } else {
                        dbswitcher = dbswitcher.concat("22");
                        number = new Integer(whereArray.get(1));
                        condQuery.put(whereArray.get(0), number);
                    }
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 2: else ");
                    isint = isInteger(whereArray.get(1));
                    if (isint == false) {
                        andOrQuery = new BasicDBObject(whereArray.get(0), whereArray.get(1));
                        andOrQueryArray.add(andOrQuery);
                    } else {
                        number = new Integer(whereArray.get(1));
                        andOrQuery = new BasicDBObject(whereArray.get(0), number);
                        andOrQueryArray.add(andOrQuery);
                    }
                }


                break;

            case 3:
               float gt;
                if(whereAndOrSwitcher == 0) {
                    dbswitcher = dbswitcher.concat("3");
                    gt = (float) Integer.parseInt(whereArray.get(1));
                    condQuery.put(whereArray.get(0), new BasicDBObject("$gt", gt));
                    //System.out.println(condQuery);
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 7 else");
                    gt = (float) Integer.parseInt(whereArray.get(1));
                    andOrQuery = new BasicDBObject(whereArray.get(0), new BasicDBObject("$gt", gt));
                    andOrQueryArray.add(andOrQuery);
                }
                break;

            case 4:
                float lt;
                if(whereAndOrSwitcher == 0) {
                    dbswitcher = dbswitcher.concat("4");
                    lt = (float) Integer.parseInt(whereArray.get(1));
                    condQuery.put(whereArray.get(0), new BasicDBObject("$lt", lt));
                    //System.out.println(condQuery);
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 7 else");
                    lt = (float) Integer.parseInt(whereArray.get(1));
                    andOrQuery = new BasicDBObject(whereArray.get(0), new BasicDBObject("$lt", lt));
                    andOrQueryArray.add(andOrQuery);
                }
                break;

            case 5:
                float ne;
                if(whereAndOrSwitcher == 0) {
                    dbswitcher = dbswitcher.concat("5");
                    ne = (float) Integer.parseInt(whereArray.get(1));
                    condQuery.put(whereArray.get(0), new BasicDBObject("$ne", ne));
                    //System.out.println(condQuery);
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 7 else");
                    ne = (float) Integer.parseInt(whereArray.get(1));
                    andOrQuery = new BasicDBObject(whereArray.get(0), new BasicDBObject("$ne", ne));
                    andOrQueryArray.add(andOrQuery);
                }
                
                break;

            case 6:
               float gte;
                if(whereAndOrSwitcher == 0) {
                    dbswitcher = dbswitcher.concat("6");
                    gte = (float) Integer.parseInt(whereArray.get(1));
                    condQuery.put(whereArray.get(0), new BasicDBObject("$gte", gte));
                    //System.out.println(condQuery);
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 7 else");
                    gte = (float) Integer.parseInt(whereArray.get(1));
                    andOrQuery = new BasicDBObject(whereArray.get(0), new BasicDBObject("$gte", gte));
                    andOrQueryArray.add(andOrQuery);
                }
                break;

            case 7:
                 float lte;
                if(whereAndOrSwitcher == 0) {
                    dbswitcher = dbswitcher.concat("7");
                    lte = (float) Integer.parseInt(whereArray.get(1));
                    condQuery.put(whereArray.get(0), new BasicDBObject("$lte", lte));
                    //System.out.println(condQuery);
                    //    cursorDoc = collection.find(condQuery, fields);
                    //    fireQuery(condQuery, fields);
                } else {
                    System.out.println("im in case 7 else");
                    lte = (float) Integer.parseInt(whereArray.get(1));
                    andOrQuery = new BasicDBObject(whereArray.get(0), new BasicDBObject("$lte", lte));
                    //System.out.println("lte:: "+andOrQuery);
                    andOrQueryArray.add(andOrQuery);
                }

                break;
        }
        return operator;
    }
    
    
    private void aggDropListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggDropListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aggDropListActionPerformed

    private void keyFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyFieldActionPerformed
        //  keyField.setText("");
    }//GEN-LAST:event_keyFieldActionPerformed

    private void keyFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyFieldMouseClicked
        keyField.setText("");
    }//GEN-LAST:event_keyFieldMouseClicked

    private void aggCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aggCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_aggCheckBoxActionPerformed

    
    void aggIntialize() {
        if (aggCheckBox.isSelected() == false) {
            aggDropList.setEnabled(false);
            keyField.setEditable(false);
            keyField.setText("");
        } else {
            aggDropList.setEnabled(true);
            keyField.setEditable(true);
            keyField.setText("enter key");
        }
    }
    private void aggCheckBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aggCheckBoxMouseClicked
        aggIntialize();
    }//GEN-LAST:event_aggCheckBoxMouseClicked

    public void MongoConnect(String ip, String dbName, String collectionName) {
        Connection connect = new Connection();
        mongo = connect.getMongoConnection(ip);
        db = mongo.getDB(dbName);
        collection = db.getCollection(collectionName);
    }

    public void fireQuery(BasicDBObject allQuery, BasicDBObject fields) {
        
        Calendar calendar = Calendar.getInstance();
          long time1 = System.currentTimeMillis();
  calendar.setTimeInMillis(time1);
  System.out.println(calendar.get(Calendar.HOUR_OF_DAY));
  System.out.println(calendar.get(Calendar.MINUTE));
       
        //System.out.println("Time 1: "+time1);
        int aggCount=0; 
        if (select.equals("*") && cond.equals("")) {

            double total = 0;
            double stopTime = 0;
            double elapsedTime = 0;
            double startTime = System.currentTimeMillis();
            
            cursorDoc = collection.find();
            //System.out.println("Cursor: "+allQuery);
            stopTime = System.currentTimeMillis();
            aggCount = collection.find().count();
            elapsedTime = stopTime - startTime;
            //System.out.println(elapsedTime);
             elapsedTime = (elapsedTime/1000);
            //System.out.println(elapsedTime+" secs");
        } else if (select.equals("*") && !cond.equals("")) {
            double total = 0;
            double stopTime = 0;
            double elapsedTime = 0;
            double startTime = System.currentTimeMillis();
            cursorDoc = collection.find(allQuery);
            //System.out.println("Cursornew: "+collection.find(allQuery));
            stopTime = System.currentTimeMillis();
            aggCount = collection.find(allQuery).count();
            elapsedTime = stopTime - startTime;
            //System.out.println(elapsedTime);
             //elapsedTime = (elapsedTime/1000);
            //System.out.println(elapsedTime+" secs");

        } else {
            if(aggCheckBox.isSelected()==false){
            double total = 0;
            double stopTime = 0;
            double elapsedTime = 0;
            double startTime = System.currentTimeMillis();
            cursorDoc = collection.find(allQuery, fields);
            //System.out.println("Cursor: "+allQuery);
            stopTime = System.currentTimeMillis();
            aggCount = collection.find(allQuery,fields).count();
            elapsedTime = stopTime - startTime;
            elapsedTime = (elapsedTime/1000);
            //System.out.println(elapsedTime+" secs");
            }
            
        }
        
          if (aggCheckBox.isSelected() == true){
              System.out.println("all query:"+allQuery);
              output2 = collection.aggregate(allQuery);
                System.out.println("The max value is: ");
                for (DBObject result : output2.results()) {
                    displayBox.append(result.toString());
                    displayBox.append("\n");
                }
          }
        
        long time2 = System.currentTimeMillis();
        calendar.setTimeInMillis(time2);
  //System.out.println(calendar.get(Calendar.HOUR_OF_DAY));
  //System.out.println(calendar.get(Calendar.MINUTE));
        
        //System.out.println("Time 2: "+time2);
        long time = time2-time1;
        System.out.println("TTime: "+time);
        
        if (countChecker == 0) {

            while (cursorDoc.hasNext()) {
                //System.out.println(cursorDoc.next());
                displayBox.append(cursorDoc.next().toString());
                displayBox.append("\n");
            }
        }
        else{
            String str = "{\"_id\":\" "+keyField.getText()+" \", \"count\":\" "+aggCount+" \"}";
            displayBox.setText(str);
        }
    }
    
    public void insertSelectTokens() {
        if (select.contains(",")) {
            while (selectTokens.hasMoreElements()) {
                selectArray.add(selectTokens.nextToken());
            }
        }

        Iterator itr = selectArray.iterator();
        Object element;
        while (itr.hasNext()) {
            element = itr.next();
            fields.put(element.toString(), 1);
            System.out.println("");
        }
    }

    private static boolean isContain(String source, String subItem) {
        String pattern = "\\b"+subItem+"\\b";
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(source);
        return m.find();
    }
    
    void queryChecker(){
        cond = cond.replace("\"", "");
        System.out.println("entered in querychcker");
        if(isContain(cond," and ") || isContain(cond," or ")) {
            whereAndOrSwitcher = 1; 
            condQuery = new BasicDBObject();
            String[] whereSplitted = AndOrChecker();
            System.out.println(whereSplitted[0]);
            System.out.println(whereSplitted[1]);
             op1 = whereQueryformator(whereSplitted[0]);
             op2 = whereQueryformator(whereSplitted[1]);
          
            System.out.println(andOrQueryArray);
            if(isContain(cond," and ")) {
                BasicDBObject bobj = new BasicDBObject();
                dbswitcher = dbswitcher.concat("9");
                bobj.put("$and",andOrQueryArray);
                System.out.println("Query Check: "+bobj);
                petime = System.currentTimeMillis();
                prtime = petime-pstime;
                System.out.println("prtime:: "+prtime);
                dbQueryFire(bobj);
                //fireQuery(bobj, fields);   
            }
            else if(isContain(cond," or ")){
                dbswitcher = dbswitcher.concat("8");
                BasicDBObject bobj = new BasicDBObject();
                bobj.put("$or",andOrQueryArray);
                System.out.println("Query Check: "+bobj);
                petime = System.currentTimeMillis();
                prtime = petime-pstime;
                System.out.println("prtime:: "+prtime);
                dbQueryFire(bobj);
                //fireQuery(bobj, fields);   
            }
        }
        else {
            System.out.println("im in querychecker: else");
            condQuery = new BasicDBObject();
            whereQueryformator(cond);
            System.out.println("Query Check: "+condQuery);
            petime = System.currentTimeMillis();
            prtime = petime-pstime;
            System.out.println("prtime:: "+prtime);
            dbQueryFire(condQuery);
            //fireQuery(condQuery, fields);
            
        }
      
    }     
         
    public String[] AndOrChecker(){
        if(isContain(cond," and ")) {
            whereSplitted = cond.split(" and ");
            //System.out.println(Arrays.toString(whereSplitted));
           
        }
        else if(isContain(cond," or ")) {
            whereSplitted = cond.split(" or ");       
        }
        return whereSplitted;
    }
    
    void insertWhereTokens(String op, String cond) {
        //doubt
        whereTokens = new StringTokenizer(cond, op);
        StringTokenizer hbaseTokens=new StringTokenizer(cond,op);
        while (whereTokens.hasMoreElements()) {
            whereArray.add(whereTokens.nextToken());
        }
        whereArray.set(1, whereArray.get(1).replace("\"", ""));
        System.out.println("in insert");
        while(hbaseTokens.hasMoreElements()){
            hbaseAndOr.add(hbaseTokens.nextToken());
        }
        
    }

    DBObject groupByFalse() {
        DBObject groupFields = new BasicDBObject("_id", "");
        return groupFields;
    }

    DBObject groupByTrue() {
        String groupByKey = groupbyField.getText();
        groupByKey = "$" + groupByKey;
        DBObject groupFields = new BasicDBObject("_id", groupByKey);
        return groupFields;
    }

    void aggregateMongo(String avgkey, String grpkey, int index) {
        DBObject groupFields;
        BasicDBObject group;
        AggregationOutput output2;
        String dollar = "$";
        String key = keyField.getText();
        key = dollar + key;
        String groupByKey = groupbyField.getText();
        groupByKey = dollar + groupByKey;
        double startTime = System.currentTimeMillis();
            System.out.println("in case1 out");
        switch (index) {
            case 1:
                if (groupByKey.equals("$")) {
                    dbswitcher = dbswitcher.concat("3");
                    System.out.println("in case1 if");
                    groupFields = groupByFalse();
                } else {
                    dbswitcher = dbswitcher.concat("4");
                    groupFields = groupByTrue();
                }
                groupFields.put("max", new BasicDBObject("$max", key));
                group = new BasicDBObject("$group", groupFields);
                petime = System.currentTimeMillis();
                prtime = petime-pstime;
                System.out.println("prtime:: "+prtime);
                displayBox.setText("");
                dbQueryFire(group);
                
                break;
            case 2:
                if (groupByKey.equals("$")) {
                    dbswitcher = dbswitcher.concat("5");
                    groupFields = groupByFalse();
                } else {
                    dbswitcher = dbswitcher.concat("6");
                    groupFields = groupByTrue();
                }
                groupFields.put("min", new BasicDBObject("$min", key));
                
                group = new BasicDBObject("$group", groupFields);
                petime = System.currentTimeMillis();
                prtime = petime-pstime;
                System.out.println("prtime:: "+prtime);
                dbQueryFire(group);
                break;
            case 3:
                   
                if (groupByKey.equals("$")) {
                    dbswitcher = dbswitcher.concat("1");
                    groupFields = groupByFalse();
                } else {
                    dbswitcher = dbswitcher.concat("2");
                    groupFields = groupByTrue();
                }
                groupFields.put("average", new BasicDBObject("$avg", key));
                group = new BasicDBObject("$group", groupFields);
                petime = System.currentTimeMillis();
                prtime = petime-pstime;
                System.out.println("prtime:: "+prtime);
                System.out.println("group field: "+group);
                dbQueryFire(group);
                
                break;
            case 4:
                /*
                DBObject groupField = new BasicDBObject("_id", key);

                groupField.put("count", new BasicDBObject("$sum", 1));

                DBObject grp = new BasicDBObject("$group", groupField);
                // You can add a sort to order by count descending

                DBObject sortFields = new BasicDBObject("count", -1);
                DBObject sort = new BasicDBObject("$sort", sortFields);

                AggregationOutput output = collection.aggregate(grp, sort);

                //System.out.println( output.getCommandResult() );
                for (DBObject res : output.results()) {
                    //System.out.println(result);
                    displayBox.append(res.toString());
                }
                //displayBox.setText(output.getCommandResult().toString());
                break; */
                dbswitcher = dbswitcher.concat("7");
                countChecker = 1;
                selectArray.add(keyField.toString());
                queryChecker();
                break;
                
        }
        
        long stopTime = System.currentTimeMillis();
        double elapsedTime = stopTime - startTime;
        System.out.println("exe time: "+elapsedTime);

    }

    public static boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
        } catch (NumberFormatException | NullPointerException e) {
            return false;
        }
        return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mapFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        mpframe = new mapFrame();
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                mpframe.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Map;
    private javax.swing.JCheckBox aggCheckBox;
    private javax.swing.JComboBox<String> aggDropList;
    private javax.swing.JLabel aggregationLabel1;
    private javax.swing.JTextArea displayBox;
    private javax.swing.JTextField fromBox;
    private javax.swing.JLabel fromLabel;
    private javax.swing.JTextField groupbyField;
    private javax.swing.JLabel groupbyLabel;
    private javax.swing.JLabel invalidFrom1;
    private javax.swing.JLabel invalidSelect;
    private javax.swing.JLabel invalidWhere;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField keyField;
    private javax.swing.JLabel leftBrace;
    private javax.swing.JLabel rightBrace;
    private javax.swing.JTextField selectBox;
    private javax.swing.JLabel selectLabel;
    private javax.swing.JTextField whereBox;
    private javax.swing.JLabel whereLabel;
    // End of variables declaration//GEN-END:variables
}
